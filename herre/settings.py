"""
Django settings for elements project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from omegaconf import OmegaConf

conf = OmegaConf.load("config.yaml")
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = conf.django.secret_key

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = conf.django.debug or False

FAKT_NAME = conf.deployment.name
ALLOWED_HOSTS = conf.django.hosts


AWS_ACCESS_KEY_ID = conf.minio.access_key
AWS_SECRET_ACCESS_KEY = conf.minio.secret_key
AWS_S3_ENDPOINT_URL = f"{conf.minio.protocol}://{conf.minio.host}:{conf.minio.port}"
# AWS_S3_PUBLIC_ENDPOINT_URL = (
#    f"{conf.minio.public.protocol}://{conf.minio.public.host}:{conf.minio.public.port}"
# )
AWS_S3_URL_PROTOCOL = f"{conf.minio.protocol}:"
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_EXPIRE = 3600


AWS_STORAGE_BUCKET_NAME = conf.minio.buckets[0].name
AWS_DEFAULT_ACL = "private"
AWS_S3_USE_SSL = True
AWS_S3_SECURE_URLS = False  # Should resort to True if using in Production behind TLS
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

CORS_ORIGIN_ALLOW_ALL = True

INSTALLED_APPS = [
    "registration",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "oauth2_provider",
    "django_filters",
    "rest_framework",
    "corsheaders",
    "channels",
    "balder",
    "avatar",
    "health_check",
    "health_check.db",
    "accounts",
    "lord",
    "graphene_django",
    "django_probes",
    "crispy_forms",
    "infos",
]


SUPERUSERS = [
    {
        "USERNAME": conf.django.admin.username,
        "EMAIL": conf.django.admin.email,
        "PASSWORD": conf.django.admin.password,
    }
]

LOKUSERS = [
    {
        "USERNAME": su.username,
        "EMAIL": su.email,
        "PASSWORD": su.password,
        "GROUPS": su.get("groups", []),
    }
    for su in conf.users
]


LOKGROUPS = [
    {
        "GROUP_NAME": su.get("groups", []),
        "GROUP_DESCRIPTION": su.get("description", ""),
    }
    for su in conf.groups
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

HEALTH_CHECK = {
    "DISK_USAGE_MAX": 90,  # percent
    "MEMORY_MIN": 100,  # in MB
}

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "media/"

ROOT_URLCONF = "herre.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            "templates",
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "herre.wsgi.application"
ASGI_APPLICATION = "herre.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": conf.db.engine,
        "NAME": conf.db.db_name,
        "USER": conf.db.username,
        "PASSWORD": conf.db.password,
        "HOST": conf.db.host,
        "PORT": conf.db.port,
    }
}


CHANNEL_LAYERS = {
    "default": {
        # This example app uses the Redis channel layer implementation channels_redis
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(conf.redis.host, conf.redis.port)],
        },
    },
}

AUTH_USER_MODEL = "lord.HerreUser"

AUTHENTICATION_BACKENDS = (
    "oauth2_provider.backends.OAuth2Backend",
    "django.contrib.auth.backends.ModelBackend",
)

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


BALDER = {"SUBSCRIPTIONS": False}


GRAPHENE = {"SCHEMA": "balder.schema.graphql_schema"}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

STATIC_ROOT = "/var/www/static"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console": {
            # exact format is not important, this is the minimum information
            "format": "%(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "rich.logging.RichHandler",
            "formatter": "console",
            "rich_tracebacks": True,
        },
    },
    "loggers": {
        # root logger
        "": {
            "level": "INFO",
            "handlers": ["console"],
        },
        "oauthlib": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "delt": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "oauth2_provider": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

ACCOUNT_ACTIVATION_DAYS = conf.activation_days
REGISTRATION_AUTO_LOGIN = True  # Automatically log the user in.

# Unomment and re run
OAUTH2_PROVIDER_APPLICATION_MODEL = "oauth2_provider.Application"
OAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = "oauth2_provider.AccessToken"
OAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = "oauth2_provider.RefreshToken"
OAUTH2_PROVIDER_ID_TOKEN_MODEL = "oauth2_provider.IDtoken"

OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": conf.private_key,
    "SCOPES": {
        "openid": "OpenID Connect scope",
        **conf.scopes
        # ... any other scopes that you use
    },
    "ACCESS_TOKEN_EXPIRE_SECONDS": conf.token_expire_seconds
    or 60 * 60 * 24,  # TOkens are valid for 24 Hours
    "ALLOWED_REDIRECT_URI_SCHEMES": ["http", "https", "com.example.feuer"],
    "OAUTH2_VALIDATOR_CLASS": "lord.oauth.validator.CustomOAuth2Validator",
    "OAUTH2_SERVER_CLASS": "lord.oauth.server.JWTServer",
    "ALLOWED_REDIRECT_URI_SCHEMES": ["http", "https", "tauri", "arkitekt"],
    # }
    # ... any other settings you want
}

# OAUTH2_PROVIDER = {
#    # this is the list of available scopes
#    "SCOPES": conf.scopes,
##    "ACCESS_TOKEN_EXPIRE_SECONDS": conf.auth.token_expire_seconds
#    or 60 * 60 * 24,  # TOkens are valid for 24 Hours
#    "ALLOWED_REDIRECT_URI_SCHEMES": ["http", "https", "com.example.feuer"],
#    "OAUTH2_SERVER_CLASS": "lord.oauth.server.JWTServer",
#    "OAUTH2_VALIDATOR_CLASS": "lord.oauth.validator.JWTValidator",
# }

OAUTH2_JWT = {
    "PRIVATE_KEY": conf.private_key,
    "PUBLIC_KEY": conf.public_key,
    "KEY_TYPE": conf.get("key_type", "RS256"),
    "ISSUER": "herre",
}


REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        #'rest_framework.permissions.IsAuthenticated',
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
}

ENSURED_APPS = [
    {
        "NAME": app.name,
        "CLIENT_ID": app.client_id,
        "CLIENT_SECRET": app.client_secret,
        "CLIENT_TYPE": app.client_type,
        "GRANT_TYPE": app.grant_type,
        "REDIRECT_URIS": list(app.get("redirect_uris", [])),
        "SCOPES": list(app.scopes),
        "TENANT": app.tenant,
        "IDENTIFIER": app.identifier,
        "CONFIDENTIAL": app.get("confidential", True),
        "VERSION": app.version,
    }
    for app in conf.apps
]

USE_X_FORWARDED_HOST = True

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "login"
STATIC_URL = "static/"


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True
