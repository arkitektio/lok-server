schema {
  query: Query
  mutation: Mutation
}

type Application {
  id: ID!
  clientId: String!
  user: HerreUser
  redirectUris: [String]
  clientType: ApplicationClientType!
  authorizationGrantType: ApplicationAuthorizationGrantType!
  clientSecret: String!
  name: String!
  skipAuthorization: Boolean!
  created: DateTime!
  updated: DateTime!
}

enum ApplicationAuthorizationGrantType {
  AUTHORIZATION_CODE
  IMPLICIT
  PASSWORD
  CLIENT_CREDENTIALS
}

enum ApplicationClientType {
  CONFIDENTIAL
  PUBLIC
}

scalar DateTime

type DeleteApplicationResult {
  clientId: ID
}

enum GrantType {
  CLIENT_CREDENTIALS
  IMPLICIT
  PASSWORD
  AUTHORIZATION_CODE
}

type HerreUser {
  id: ID!
  password: String!
  lastLogin: DateTime
  isSuperuser: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  oauth2ProviderApplication: [Application!]!
  roles: [String]
}

type Mutation {
  deleteApplication(clientId: ID!): DeleteApplicationResult
  createApplication(grantType: GrantType!, name: String!, redirectUris: [String]): Application
}

type Query {
  hello: String
  void: String
  scopes: [Scope]
  me: HerreUser
  applications: [Application]
  application(clientId: ID!): Application
}

type Scope {
  value: String
  label: String
  description: String
}
